#!/usr/bin/env bash

###
# ~/.functions
##

##
# CREATE A NEW DIRECTORY AND ENTER IT.
##
function mkd() {
    mkdir -p "${@}" && cd "$_" || exit;
}

##
# CHANGE WORKING DIRECTORY TO THE TOP-MOST FINDER WINDOW LOCATION.
##
function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')" || exit;
}

##
# CREATE A .tar.gz ARCHIVE, USING `zopfli`, `pigz` OR `gzip` FOR COMPRESSION.
##
function targz() {
    local tmpFile="${@%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat# -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null;  # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # THE .tar FILE IS SMALLER THAN 50 MB AND ZOPFLI IS AVAILABLE; USE IT.
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";

    zippedSize=$(
        stat -f"%z#" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
    );

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

##
# DETERMINE SIZE OF A FILE OR TOTAL SIZE OF A DIRECTORY.
##
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

##
# USE GIT’S COLORED DIFF WHEN AVAILABLE
##
hash git &>/dev/null;
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

##
# CREATE A DATA URL FROM A FILE
##
function dataurl() {
    local mimeType
    mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

##
# CREATE A GIT.IO SHORT URL
##
function gitio() {
    if [ -z "${1}" ] && [ -z "${2}" ]; then
        echo "Usage: \`gitio slug url\`";
        return 1;
    fi;
    curl -i https://git.io/ -F "url=${2}" -F "code=${1}";
}

##
# START AN HTTP SERVER FROM A DIRECTORY, OPTIONALLY SPECIFYING THE PORT
##
function server() {
    local currentDir="${PWD##*/}";
    local localhostname
    localhostname="${1:-${currentDir}}";
    local port
    port="${2:-4443}";
    local certpath
    certpath="${3:-${HOME}/dev/Personal/certs/localhost.pem}";
    local keypath
    keypath="${3:-${HOME}/dev/Personal/certs/localhost-key.pem}";

    sleep 1 && open "https://${localhostname}.dev.local:${port}/" &

    # SET THE DEFAULT CONTENT-TYPE TO `text/plain` INSTEAD OF `application/octet-stream`
    # AND SERVE EVERYTHING AS UTF-8 (ALTHOUGH NOT TECHNICALLY CORRECT, THIS DOESN’T BREAK ANYTHING FOR BINARY FILES)
    python "${HOME}"/dotfiles/shellscripts/python/simple-server.py "${localhostname}" "${port}" "${certpath}" "${keypath}";
}

##
# START A PHP SERVER FROM A DIRECTORY, OPTIONALLY SPECIFYING THE PORT.
# (REQUIRES PHP 5.4.0+.)
##
function phpserver() {
    local port="${1:-4000}";
    local ip
    ip=$(ipconfig getifaddr en1);
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}";
}

##
# COMPARE ORIGINAL AND GZIPPED FILE SIZE.
##
function gz() {
    local origsize
    origsize=$(wc -c < "$1");
    local gzipsize
    gzipsize=$(gzip -c "$1" | wc -c);
    local ratio
    ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}

##
# SYNTAX-HIGHLIGHT JSON STRINGS OR FILES.
# USAGE: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
##
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript;
    else # pipe
        python -mjson.tool | pygmentize -l javascript;
    fi;
}

##
# RUN `dig` AND DISPLAY THE MOST USEFUL INFO.
##
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer;
}

##
# UTF-8-ENCODE A STRING OF UNICODE SYMBOLS.
##
function escape() {
    printf "\\\x%s" "$(printf \"%s\" "${@}" | xxd -p -c1 -u)";s_client
    # PRINT A NEWLINE UNLESS WE’RE PIPING THE OUTPUT TO ANOTHER PROGRAM.
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

##
# DECODE \x{ABCD}-STYLE UNICODE ESCAPE SEQUENCES.
##
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\"";
    # PRINT A NEWLINE UNLESS WE’RE PIPING THE OUTPUT TO ANOTHER PROGRAM.
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

##
# GET A CHARACTER’S UNICODE CODE POINT.
##
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))";
    # PRINT A NEWLINE UNLESS WE’RE PIPING THE OUTPUT TO ANOTHER PROGRAM.
    if [ -t 1 ]; then
        echo ""; # newline
    fi;
}

##
# SHOW ALL THE NAMES (CNS AND SANS) LISTED IN THE SSL CERTIFICATE
# FOR A GIVEN DOMAIN.
##
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    tmp=$(echo -e "GET / HTTP/1.0\nEOT" | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);
    local tmp

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        local certText
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

###
# —[ GENERAL ]— OPEN CURRENT DIRECTORY IN SUBLIME
##
# `s` WITH NO ARGUMENTS OPENS THE CURRENT DIRECTORY IN SUBLIME TEXT, OTHERWISE
# OPENS THE GIVEN LOCATION.
####
function s() {
    if [ $# -eq 0 ]; then
        subl -n .;
    else
        subl -n "$@";
    fi;
}

###
# —[ GENERAL ]— OPEN CURRENT DIRECTORY IN VISUAL STUDIO CODE
##
# `a` wITH NO ARGUMENTS OPENS THE CURRENT DIRECTORY IN VS CODE EDITOR, OTHERWISE
# OPENS THE GIVEN LOCATION.
####
function vs() {
    if [ $# -eq 0 ]; then
        code-insiders -n .;
    else
        code-insiders -n "$@";
    fi;
}

###
# —[ GENERAL ]— OPEN CURRENT DIRECTORY IN VIM
##
# `v` WITH NO ARGUMENTS OPENS THE CURRENT DIRECTORY IN VIM, OTHERWISE OPENS THE
# GIVEN LOCATION.
####
function v() {
    if [ $# -eq 0 ]; then
        vim .;
    else
        vim "$@";
    fi;
}

###
# —[ GENERAL ]— NORMALIZE `open` across Linux, macOS, and Windows.
##
# THIS IS NEEDED TO MAKE THE `o` FUNCTION (SEE BELOW) CROSS-PLATFORM.
####
if [ ! $(uname -s) = 'Darwin' ]; then
    if grep -q Microsoft /proc/version; then
        # UBUNTU ON WINDOWS USING THE LINUX SUBSYSTEM
        alias open='explorer.exe';
    else
        alias open='xdg-open';
    fi
fi

###
# —[ GENERAL ]— OPEN CURRENT DIRECTORY
##
##`o` WITH NO ARGUMENTS OPENS THE CURRENT DIRECTORY, OTHERWISE OPENS THE
# GIVEN LOCATION.
####
function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

###
# `tre` IS A SHORTHAND FOR `tree` WITH HIDDEN FILES AND COLOR ENABLED, IGNORING
# THE `.git` DIRECTORY, LISTING DIRECTORIES FIRST. THE OUTPUT GETS PIPED INTO
# `less` WITH OPTIONS TO PRESERVE COLOR AND LINE NUMBERS, UNLESS THE OUTPUT IS
# SMALL ENOUGH FOR ONE SCREEN.
####
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

###
# ALWAYS USE THE CORRECT PROGRAM TO EXTRACT FILES.
####
function extract {
    if [ -z "$1" ]; then
        # DISPLAY USAGE IF NO PARAMETERS GIVEN
        echo -en "${bold}${violet}@USAGE:${reset}\n${yellow}extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>${reset}"
        echo
    else
        if [ -f $1 ] ; then
            # NAME=${1%.*}
            # mkdir $NAME && cd $NAME
            case $1 in
                *.tar.bz2)   tar xvjf ./$1    ;;
                *.tar.gz)    tar xvzf ./$1    ;;
                *.tar.xz)    tar xvJf ./$1    ;;
                *.lzma)      unlzma ./$1      ;;
                *.bz2)       bunzip2 ./$1     ;;
                *.rar)       unrar x -ad ./$1 ;;
                *.gz)        gunzip ./$1      ;;
                *.tar)       tar xvf ./$1     ;;
                *.tbz2)      tar xvjf ./$1    ;;
                *.tgz)       tar xvzf ./$1    ;;
                *.zip)       unzip ./$1       ;;
                *.Z)         uncompress ./$1  ;;
                *.7z)        7z x ./$1        ;;
                *.xz)        unxz ./$1        ;;
                *.exe)       cabextract ./$1  ;;
                *)           echo "extract: '$1' - unknown archive method" ;;
            esac
        else
            echo "$1 - file does not exist"
        fi
    fi
}

###
# CONVERT HEX COLOR VALUE TO A (NEAREST) 0-256 COLOR INDEX
####
function fromhex() {
    hex=${1##"##"}
    r=$(printf '0x%0.2s' "$hex")
    g=$(printf '0x%0.2s' "${hex##??}")
    b=$(printf '0x%0.2s' "${hex##????}")
    printf '%03d' "$(( (r<75?0:(r-35)/40)*6*6 +
                       (g<75?0:(g-35)/40)*6   +
                       (b<75?0:(b-35)/40)     + 16 ))"
}

###
# —[ DOCKER ]— GET AUTHENTICATION TOKEN
####
dockerssh() {
    dockerexec "${1}" /bin/bash
}

dockerexec() {
    sudo docker exec -i -t "${1}" "${2}"
}

###
# —[ GENERAL ]— FIND PROCESSES RUNNING ON A SPECIFICED PORT.
####
function portlistener() {
    lsof -n -i:"${1}" | grep LISTEN;
}

