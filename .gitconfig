[user]
    name = Bruce Bentley
    email = brucebentley@me.com
    signingkey = 8E784AA825D1CB90

# Conditional for Work Git Configuration
[includeIf "gitdir:~/Projects/AEM/"]
    path = C:\\Users\\bbentley\\.gitconfig-work

[core]
    autocrlf = false

    # Use Sublime Text as the default editor.
    #     `-n -w` Opens a new window & waits for the files to be closed before returning.
    #editor = code --wait
    editor = code-insiders --wait
    #editor = subl --wait

    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = C:\\Users\\bbentley\\.gitignore_global
    attributesfile = C:\\Users\\bbentley\\.gitattributes

    # Treat spaces before tabs, lines that are indented with 8 or more spaces, and
    # all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of
    # a line
    whitespace = space-before-tab,tab-in-indent,trailing-space,tabwidth=4

    # Make `git rebase` safer on macOS
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true
    longpaths = true

[alias]
    # View abbreviated SHA, description, and history graph of the latest 20 commits
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    lg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit

    # View the current working tree status using the short format
    #s = status -s
    s = !git status --long

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !git pull --recurse-submodules

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    # Show verbose output about tags, branches or remotes
    tags = !git tag -l
    branches = !git branch -a
    remotes = !git remote -v

    # List aliases
    #aliases = config --get-regexp alias
    aliases = "!git config -l | grep alias | cut -c 7-"

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Create an empty commit with message & push to the remote origin, triggering a build pipeline
    empty = "!e() { git commit --allow-empty -m \"$1\" && git push; }; e"

    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # List contributors with number of commits
    contributors = shortlog --summary --numbered

    # Merge GitHub pull request on top of the current branch or,
    # if a branch name is specified, on top of the specified branch
    mpr = "!f() { \
        declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
        declare branch=\"${2:-$currentBranch}\"; \
        if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
            git fetch origin refs/pull/$1/head:pr/$1 && \
            git checkout -B $branch && \
            git rebase $branch pr/$1 && \
            git checkout -B $branch && \
            git merge pr/$1 && \
            git branch -D pr/$1 && \
            git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
        fi \
    }; f"

[apply]
    # Detect whitespace errors when appying a patch
    whitespace = fix

[checkout]
    defaultRemote = origin

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold # line info
    old = red bold # deletions
    new = green bold # additions

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[commit]
    # Helpful Links:
    #   - https://help.github.com/articles/signing-commits-using-gpg/
    #   - https://medium.com/@pandermatt/macos-high-sierra-gpg-signing-2b7cfcd90e3c
    #   - https://gist.github.com/troyfontaine/18c9146295168ee9ca2b30c00bd1b41e
    #   - https://nathanhoad.net/how-to-git-signing-commits/
    #   - https://sabbour.me/setting-up-signed-git-commits-on-macos/
    gpgsign = true
    template = ~/dotfiles/.gitmessage
    # template = C:\\Users\\bbentley\\.gitmessage

[credential]
    helper = osxkeychain
    # helper = manager-core

[diff]
    # Detect copies as well as renames
    renames = copies

    # Enable an experimental heuristic that shifts the hunk boundary in an
    # attempt to make the resulting patch easier to read.
    indentHeuristic = true

    tool = default-difftool

[diff "bin"]
    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[difftool "default-difftool"]
    cmd = code-insiders --wait --diff $LOCAL $REMOTE

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[gpg]
    program = /usr/local/bin/gpg
    # program = C:\\Program Files (x86)\\GnuPG\\bin\\gpg.exe

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[pull]
    default = current
    rebase = false

[push]
    # https://git-scm.com/docs/git-config#git-config-pushdefault
    #default = simple
    default = current

    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[tag]
    forceSignAnnotated = true

# URL Shorthands
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]
    insteadOf = "github:"

[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]
    insteadOf = "gist:"

# Sourcetree Configuration
[difftool "sourcetree"]
    cmd = '' \"$LOCAL\" \"$REMOTE\"
    path =

[mergetool "sourcetree"]
    # cmd = /Applications/Sourcetree.app/Contents/Resources/opendiff-w.sh \"$LOCAL\" \"$REMOTE\" -ancestor \"$BASE\" -merge \"$MERGED\"
    cmd = "'' "
    trustExitCode = true
