################################################################################
#                                                                              #
# DNSMASQ CONFIGURATIONS & SETTINGS                                            #
#                                                                              #
################################################################################

#
# Dnsmasq is configured in `/etc/dnsmasq.conf`. Your distribution may also use:
#
#     - /etc/default/dnsmasq
#     - /etc/dnsmasq.d/
#     - /etc/dnsmasq.d-available/
#
# `/etc/dnsmasq.conf` is the grandmother as well as the boss. Dnsmasq reads it first at startup.
# `/etc/dnsmasq.conf` can call other configuration files with the `conf-file=` option and
# directories with the `conf-dir=` option
#
# For Example:
#     - conf-file=/etc/dnsmasqextrastuff.conf
#
# For Example:
#     - conf-dir=/etc/dnsmasq.d.
#     - conf-file=/Users/bruce.bentley/.config/dnsmasq/dnsmasq.conf
#


#
# You may include or exclude configuration files by extension. The asterisk means include,
# and the absence of the asterisk means exclude:
#
#     - conf-dir=/etc/dnsmasq.d/,*.conf, *.foo
#     - conf-dir=/etc/dnsmasq.d,.old, .bak, .tmp
#
# You may store your host configurations in multiple files with the `--addn-hosts=` option.
#

#
# Give Dnsmasq its own dedicated logfile.
#
log-facility=/var/log/dnsmasq.log


#
# Dnsmasq includes a syntax checker:
#
#     $ dnsmasq --test
#     dnsmasq: syntax check OK.
#


#
# Resolve the following domains and subdomains as 127.0.0.1, including subdomains.
#
# For Example:
#     - address=/example.localhost/127.0.0.1
#
address=/.localhost/127.0.0.1
address=/.test/127.0.0.1
listen-address=127.0.0.1


################################################################################
#                                                                              #
# USEFUL DNSMASQ CONFIGURATIONS                                                #
#                                                                              #
################################################################################

#
# Always include these lines:
domain-needed
bogus-priv
#
# These prevent packets with malformed domain names and packets with private IP addresses from
# leaving your network.
#


#
# This limits your name services exclusively to Dnsmasq, and it will not use `/etc/resolv.conf` or
# any other system name service files:
#
no-resolv


#
# Reference other name servers. The first example is for a local private domain. The second and
# third examples are OpenDNS public servers:
#
#     - server=/fooxample.com/192.168.0.1
#     - server=208.67.222.222
#     - server=208.67.220.220
#


#
# Or restrict just local domains while allowing external lookups for other domains. These are
# answered only from `/etc/hosts` or DHCP:
#
#     local=/mehxample.com/
#     local=/fooxample.com/
#


#
# Restrict which network interfaces Dnsmasq listens to:
#
#     interface=eth0
#     interface=wlan1
#


#
# Dnsmasq, by default, reads and uses `/etc/hosts`. This is a fabulously fast way to configure a lot of
# hosts, and the `/etc/hosts` file only has to exist on the same computer as Dnsmasq. You can make the
# process even faster by entering only the hostnames in `/etc/hosts`, and use Dnsmasq to add the domain.
#
# For example, `/etc/hosts` looks like this:
#
#     - 127.0.0.1       localhost
#     - 192.168.0.1     host2
#     - 192.168.0.2     host3
#     - 192.168.0.3     host4
#


#
# Then add these lines to `dnsmasq.conf`, using your own domain, of course:
#
#     - expand-hosts
#     - domain=mehxample.com
#
# Dnsmasq will automatically expand the hostnames to fully qualified domain names.
#
# For Example:
#     - host2  â†’  host2.mehxample.com
#


#
# In general, DNS wildcards are not a good practice because they invite abuse. But there are times
# when they are useful, such as inside the nice protected confines of your LAN. For example, Kubernetes
# clusters are considerably easier to manage with wildcard DNS, unless you enjoy making DNS entries
# for your hundreds or thousands of applications. Suppose your Kubernetes domain is mehxample.com;
# in Dnsmasq a wildcard that resolves all requests to mehxample.com looks like this:
#
#     - address=/mehxample.com/192.168.0.5
#
# The address to use in this case is the public IP address for your cluster. This answers requests for
# hosts and subdomains in mehxample.com, except for any that are already configured in DHCP or /etc/hosts.
#

