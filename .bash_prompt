#!/usr/bin/env bash

#
# ~/.bash_prompt
#

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
    export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
    export TERM='xterm-256color';
fi;

# COLOR SCHEME
if tput setaf 1 &> /dev/null; then
    tput sgr0;
    bold=$(tput bold);
    reset=$(tput sgr0);
    black=$(tput setaf 16);
    red=$(tput setaf 203);
    green=$(tput setaf 71);
    yellow=$(tput setaf 226);
    blue=$(tput setaf 33);
    magenta=$(tput setaf 161);
    cyan=$(tput setaf 38);
    white=$(tput setaf 231);
    pink=$(tput setaf 161);
    purple=$(tput setaf 127);
    deeppurple=$(tput setaf 55);
    indigo=$(tput setaf 25);
    lightblue=$(tput setaf 39);
    teal=$(tput setaf 30);
    lightgreen=$(tput setaf 112);
    lime=$(tput setaf 184);
    amber=$(tput setaf 214);
    orange=$(tput setaf 208);
    deeporange=$(tput setaf 202);
    brown=$(tput setaf 94);
    gray=$(tput setaf 102);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
fi;

prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ $(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}") == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! $(git diff --quiet --ignore-submodules --cached); then
                s+='+';
            fi;

            # Check for unstaged changes.
            if ! $(git diff-files --quiet --ignore-submodules --); then
                s+='!';
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?';
            fi;

            # Check for stashed files.
            if $(git rev-parse --verify refs/stash &>/dev/null); then
                s+='$';
            fi;

        fi;

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        [ -n "${s}" ] && s=" [${s}]";

        echo -e "${1}${branchName}${2}${s}";
    else
        return;
    fi;
}

# Platform Dependent Prompt Symbols
if [[ -z "$PS_SYMBOL" ]]; then
    case "$(uname)" in
        Darwin)   PS_SYMBOL='';;
        Linux)    PS_SYMBOL='$';;
        *)        PS_SYMBOL='%';;
    esac
fi

# Highlight The User Name When Logged In As Root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${bold}${red}";
else
    userStyle="${bold}${orange}";
fi;

# Highlight The Hostname When Connected Via Ssh.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${red}";
else
    hostStyle="${yellow}";
fi;

# SET THE TERMINAL TITLE TO THE CURRENT WORKING DIRECTORY.
PS1="\[\033]0;\w\007\]";
# NEWLINE
PS1+="\n";
# USERNAME
#PS1+="\[${userStyle}\]\u";
#PS1+="\[${white}\]@";
# HOST
#PS1+="\[${hostStyle}\]\h";
#PS1+="\[${white}\] in ";
# WORKING DIRECTORY
PS1+="\[${lightblue}\]~/\W\[$(tput sgr0)\]";
# GIT REPOSITORY DETAILS
PS1+="\$(prompt_git \"\[${white}\] \[${cyan}\]⑂\" \"\[${pink}\]\")";
PS1+="\n";
# OS SYMBOL
PS1+="\[${green}\]\${PS_SYMBOL} \[${reset}\]";
export PS1;

PS2="\[${yellow}\]→ \[${reset}\]";
export PS2;
